{"ast":null,"code":"import contains from 'dom-helpers/contains';\nimport listen from 'dom-helpers/listen';\nimport ownerDocument from 'dom-helpers/ownerDocument';\nimport { useCallback, useEffect, useRef } from 'react';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport warning from 'warning';\n\nconst noop = () => {};\n\nfunction isLeftClickEvent(event) {\n  return event.button === 0;\n}\n\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport const getRefTarget = ref => ref && ('current' in ref ? ref.current : ref);\n/**\n * The `useClickOutside` hook registers your callback on the document that fires\n * when a pointer event is registered outside of the provided ref or element.\n *\n * @param {Ref<HTMLElement>| HTMLElement} ref  The element boundary\n * @param {function} onClickOutside\n * @param {object=}  options\n * @param {boolean=} options.disabled\n * @param {string=}  options.clickTrigger The DOM event name (click, mousedown, etc) to attach listeners on\n */\n\nfunction useClickOutside(ref) {\n  let onClickOutside = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;\n  let {\n    disabled,\n    clickTrigger = 'click'\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const preventMouseClickOutsideRef = useRef(false);\n  const handleMouseCapture = useCallback(e => {\n    const currentTarget = getRefTarget(ref);\n    warning(!!currentTarget, 'ClickOutside captured a close event but does not have a ref to compare it to. ' + 'useClickOutside(), should be passed a ref that resolves to a DOM node');\n    preventMouseClickOutsideRef.current = !currentTarget || isModifiedEvent(e) || !isLeftClickEvent(e) || !!contains(currentTarget, e.target);\n  }, [ref]);\n  const handleMouse = useEventCallback(e => {\n    if (!preventMouseClickOutsideRef.current) {\n      onClickOutside(e);\n    }\n  });\n  useEffect(() => {\n    if (disabled || ref == null) return undefined;\n    const doc = ownerDocument(getRefTarget(ref)); // Store the current event to avoid triggering handlers immediately\n    // https://github.com/facebook/react/issues/20074\n\n    let currentEvent = (doc.defaultView || window).event; // Use capture for this listener so it fires before React's listener, to\n    // avoid false positives in the contains() check below if the target DOM\n    // element is removed in the React mouse callback.\n\n    const removeMouseCaptureListener = listen(doc, clickTrigger, handleMouseCapture, true);\n    const removeMouseListener = listen(doc, clickTrigger, e => {\n      // skip if this event is the same as the one running when we added the handlers\n      if (e === currentEvent) {\n        currentEvent = undefined;\n        return;\n      }\n\n      handleMouse(e);\n    });\n    let mobileSafariHackListeners = [];\n\n    if ('ontouchstart' in doc.documentElement) {\n      mobileSafariHackListeners = [].slice.call(doc.body.children).map(el => listen(el, 'mousemove', noop));\n    }\n\n    return () => {\n      removeMouseCaptureListener();\n      removeMouseListener();\n      mobileSafariHackListeners.forEach(remove => remove());\n    };\n  }, [ref, disabled, clickTrigger, handleMouseCapture, handleMouse]);\n}\n\nexport default useClickOutside;","map":{"version":3,"names":["contains","listen","ownerDocument","useCallback","useEffect","useRef","useEventCallback","warning","noop","isLeftClickEvent","event","button","isModifiedEvent","metaKey","altKey","ctrlKey","shiftKey","getRefTarget","ref","current","useClickOutside","onClickOutside","disabled","clickTrigger","preventMouseClickOutsideRef","handleMouseCapture","e","currentTarget","target","handleMouse","undefined","doc","currentEvent","defaultView","window","removeMouseCaptureListener","removeMouseListener","mobileSafariHackListeners","documentElement","slice","call","body","children","map","el","forEach","remove"],"sources":["C:/Users/Andrew/Desktop/cs340-react-test-app-v2/node_modules/@restart/ui/esm/useClickOutside.js"],"sourcesContent":["import contains from 'dom-helpers/contains';\nimport listen from 'dom-helpers/listen';\nimport ownerDocument from 'dom-helpers/ownerDocument';\nimport { useCallback, useEffect, useRef } from 'react';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport warning from 'warning';\n\nconst noop = () => {};\n\nfunction isLeftClickEvent(event) {\n  return event.button === 0;\n}\n\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport const getRefTarget = ref => ref && ('current' in ref ? ref.current : ref);\n\n/**\n * The `useClickOutside` hook registers your callback on the document that fires\n * when a pointer event is registered outside of the provided ref or element.\n *\n * @param {Ref<HTMLElement>| HTMLElement} ref  The element boundary\n * @param {function} onClickOutside\n * @param {object=}  options\n * @param {boolean=} options.disabled\n * @param {string=}  options.clickTrigger The DOM event name (click, mousedown, etc) to attach listeners on\n */\nfunction useClickOutside(ref, onClickOutside = noop, {\n  disabled,\n  clickTrigger = 'click'\n} = {}) {\n  const preventMouseClickOutsideRef = useRef(false);\n  const handleMouseCapture = useCallback(e => {\n    const currentTarget = getRefTarget(ref);\n    warning(!!currentTarget, 'ClickOutside captured a close event but does not have a ref to compare it to. ' + 'useClickOutside(), should be passed a ref that resolves to a DOM node');\n    preventMouseClickOutsideRef.current = !currentTarget || isModifiedEvent(e) || !isLeftClickEvent(e) || !!contains(currentTarget, e.target);\n  }, [ref]);\n  const handleMouse = useEventCallback(e => {\n    if (!preventMouseClickOutsideRef.current) {\n      onClickOutside(e);\n    }\n  });\n  useEffect(() => {\n    if (disabled || ref == null) return undefined;\n    const doc = ownerDocument(getRefTarget(ref)); // Store the current event to avoid triggering handlers immediately\n    // https://github.com/facebook/react/issues/20074\n\n    let currentEvent = (doc.defaultView || window).event; // Use capture for this listener so it fires before React's listener, to\n    // avoid false positives in the contains() check below if the target DOM\n    // element is removed in the React mouse callback.\n\n    const removeMouseCaptureListener = listen(doc, clickTrigger, handleMouseCapture, true);\n    const removeMouseListener = listen(doc, clickTrigger, e => {\n      // skip if this event is the same as the one running when we added the handlers\n      if (e === currentEvent) {\n        currentEvent = undefined;\n        return;\n      }\n\n      handleMouse(e);\n    });\n    let mobileSafariHackListeners = [];\n\n    if ('ontouchstart' in doc.documentElement) {\n      mobileSafariHackListeners = [].slice.call(doc.body.children).map(el => listen(el, 'mousemove', noop));\n    }\n\n    return () => {\n      removeMouseCaptureListener();\n      removeMouseListener();\n      mobileSafariHackListeners.forEach(remove => remove());\n    };\n  }, [ref, disabled, clickTrigger, handleMouseCapture, handleMouse]);\n}\n\nexport default useClickOutside;"],"mappings":"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"},"metadata":{},"sourceType":"module"}